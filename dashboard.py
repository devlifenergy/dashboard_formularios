# dashboard_v6.py
import streamlit as st
import pandas as pd
import gspread
import matplotlib.pyplot as plt
from datetime import datetime

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Dashboard de Resultados - Lifenergy",
    layout="wide"
)

# --- LISTA MESTRA DE TODAS AS PERGUNTAS ---
@st.cache_data
def carregar_itens_master():
    """Retorna um DataFrame com todos os itens de todos os formul√°rios e seu status de reverso."""
    # IMPORTANTE: Voc√™ precisa preencher esta lista com os itens de TODOS os seus formul√°rios.
    # Adicionei apenas alguns exemplos para a l√≥gica funcionar.
    todos_os_itens = [
        ('IF01', 'Instala√ß√µes F√≠sicas', 'O espa√ßo f√≠sico √© suficiente...', 'N√ÉO'),
        ('IF12', 'Instala√ß√µes F√≠sicas', 'H√° obst√°culos ou √°reas obstru√≠das...', 'SIM'),
        ('EQ01', 'Equipamentos', 'Os equipamentos necess√°rios est√£o dispon√≠veis...', 'N√ÉO'),
        ('EQ11', 'Equipamentos', 'Paradas n√£o planejadas atrapalham...', 'SIM'),
        ('FE01', 'Ferramentas', 'As ferramentas necess√°rias est√£o dispon√≠veis...', 'N√ÉO'),
        ('FE08', 'Ferramentas', 'Ferramentas compartilhadas raramente est√£o...', 'SIM'),
        ('PT01', 'Postos de Trabalho', 'O posto permite ajuste ergon√¥mico...', 'N√ÉO'),
        ('PT10', 'Postos de Trabalho', 'O desenho do posto induz posturas for√ßadas...', 'SIM'),
        ('RN01', 'Regras e Normas', 'As regras da empresa s√£o claras...', 'N√ÉO'),
        ('PI02', 'Pr√°ticas Informais', 'A cultura do ‚Äújeitinho‚Äù...', 'N√ÉO'),
        ('RE01', 'Recompensas e Benef√≠cios', 'A pol√≠tica de recompensas e benef√≠cios √© justa...', 'N√ÉO'),
        ('EX01', 'Fatores de Risco (Reversos)', 'Sacrifico frequentemente minha vida pessoal...', 'SIM'),
        ('CU01', 'Cultura Organizacional', 'As pr√°ticas di√°rias refletem...', 'N√ÉO'),
        ('FRPS01', 'Fatores de Risco Psicossocial (FRPS)', 'No meu ambiente h√° piadas...', 'SIM'),
        # ... (continue adicionando todos os outros itens aqui) ...
    ]
    df_master = pd.DataFrame(todos_os_itens, columns=["ID_Item", "Dimens√£o", "Item", "Reverso"])
    # O dashboard usa a coluna 'Item' para fazer a correspond√™ncia.
    return df_master

# --- CONEX√ÉO COM GOOGLE SHEETS E CARREGAMENTO DE DADOS ---
@st.cache_resource
def connect_to_gsheet():
    creds_dict = dict(st.secrets["google_credentials"])
    creds_dict['private_key'] = creds_dict['private_key'].replace('\\n', '\n')
    gc = gspread.service_account_from_dict(creds_dict)
    spreadsheet = gc.open("Respostas Formularios")
    return spreadsheet

@st.cache_data(ttl=600)
def load_all_data(_spreadsheet, _df_master):
    if _spreadsheet is None: return pd.DataFrame()
    worksheets = _spreadsheet.worksheets()
    all_dfs = []
    for ws in worksheets:
        if "observacoes" not in ws.title.lower() and "teste" not in ws.title.lower():
            try:
                data = ws.get_all_records()
                if data:
                    df = pd.DataFrame(data)
                    all_dfs.append(df)
            except Exception as e:
                st.warning(f"N√£o foi poss√≠vel ler a aba '{ws.title}': {e}")
    if not all_dfs: return pd.DataFrame()
    consolidated_df = pd.concat(all_dfs, ignore_index=True)
    
    # Junta com a lista mestra para obter o status 'Reverso' de cada item
    consolidated_df = pd.merge(consolidated_df, _df_master[['Item', 'Reverso']], on='Item', how='left')
    
    consolidated_df['Resposta_Num'] = pd.to_numeric(consolidated_df['Resposta'], errors='coerce')
    
    def ajustar_reverso(row):
        if pd.isna(row['Resposta_Num']): return None
        return (6 - row['Resposta_Num']) if row['Reverso'] == 'SIM' else row['Resposta_Num']
        
    consolidated_df['Pontua√ß√£o'] = consolidated_df.apply(ajustar_reverso, axis=1)

    consolidated_df['Data'] = pd.to_datetime(consolidated_df['Data'], errors='coerce', dayfirst=True)
    consolidated_df = consolidated_df.dropna(subset=['Data'])
    return consolidated_df

# --- IN√çCIO DA APLICA√á√ÉO ---
st.title("üìä Dashboard de An√°lise de Respostas")

df_master_itens = carregar_itens_master()
spreadsheet = connect_to_gsheet()
df = load_all_data(spreadsheet, df_master_itens)

if df.empty:
    st.warning("N√£o foi poss√≠vel carregar ou processar dados das planilhas.")
    st.stop()

# --- BARRA LATERAL DE FILTROS ---
st.sidebar.header("Filtros")
lista_respondentes = df['Respondente'].dropna().unique().tolist()
respondentes_selecionados = st.sidebar.multiselect("Filtrar por Respondente:", options=lista_respondentes)

min_date = df['Data'].min().date()
max_date = df['Data'].max().date()
data_selecionada = st.sidebar.date_input(
    "Filtrar por Per√≠odo:", value=(min_date, max_date),
    min_value=min_date, max_value=max_date
)

lista_dimensoes = df['Dimens√£o'].dropna().unique().tolist()
dimensoes_selecionadas = st.sidebar.multiselect("Filtrar por Dimens√£o (opcional):", options=lista_dimensoes)

# --- APLICA√á√ÉO DOS FILTROS ---
df_filtrado = df.copy()
if len(data_selecionada) == 2:
    start_date, end_date = data_selecionada
    df_filtrado = df_filtrado[df_filtrado['Data'].dt.date.between(start_date, end_date)]
if respondentes_selecionados:
    df_filtrado = df_filtrado[df_filtrado['Respondente'].isin(respondentes_selecionados)]
if dimensoes_selecionadas:
    df_filtrado = df_filtrado[df_filtrado['Dimens√£o'].isin(dimensoes_selecionadas)]

# --- EXIBI√á√ÉO DOS RESULTADOS ---
st.header("An√°lise de Desempenho por Dimens√£o")

if df_filtrado.empty:
    st.info("Nenhuma resposta encontrada para os filtros selecionados.")
else:
    resumo_dimensoes = df_filtrado.groupby('Dimens√£o')['Pontua√ß√£o'].mean().round(2).reset_index()
    resumo_dimensoes = resumo_dimensoes.rename(columns={'Pontua√ß√£o': 'M√©dia'}).sort_values('M√©dia', ascending=False)
    
    if resumo_dimensoes.empty or resumo_dimensoes['M√©dia'].isnull().all():
        st.info("Nenhuma resposta v√°lida para gerar a an√°lise por dimens√£o.")
    else:
        st.subheader("Pontua√ß√£o M√©dia por Dimens√£o")
        st.dataframe(resumo_dimensoes, use_container_width=True, hide_index=True)

        # ##### TRECHO DO GR√ÅFICO ALTERADO PARA PIZZA COM LEGENDA NUMERADA #####
        st.subheader("Gr√°fico Comparativo por Dimens√£o")

        # Dados para o gr√°fico
        labels = resumo_dimensoes["Dimens√£o"]
        values = resumo_dimensoes["M√©dia"]
        slice_labels = [str(i+1) for i in range(len(labels))] # Cria r√≥tulos "1", "2", "3"...

        fig, ax = plt.subplots(figsize=(8, 6))
        
        # Cria a pizza usando os valores como tamanho e os n√∫meros como r√≥tulo de cada fatia
        wedges, texts = ax.pie(
            values, 
            labels=slice_labels, 
            startangle=90,
            textprops=dict(color="w", size=12, weight="bold") # Estilo dos n√∫meros
        )
        ax.axis('equal')
        
        st.pyplot(fig)

        # Cria a legenda numerada abaixo do gr√°fico
        st.subheader("Legenda do Gr√°fico")
        for i, row in resumo_dimensoes.iterrows():
            st.markdown(f"**{i+1}:** {row['Dimens√£o']} (M√©dia: **{row['M√©dia']:.2f}**)")
        # --- FIM DO TRECHO ALTERADO ---

# Expander com dados brutos
with st.expander("Ver dados filtrados"):
    st.dataframe(df_filtrado)